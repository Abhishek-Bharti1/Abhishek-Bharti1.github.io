{"version":3,"file":"static/js/168.c4cd3bec.chunk.js","mappings":"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","sources":["components/About/About.tsx","components/ContactIntro/ContactIntro.tsx","PAGE/CONTACT/Contact.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","components/socialmedia/social/Social.tsx","components/socialmedia/Socials.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/@chakra-ui/layout/src/spacer.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/grid-item.tsx"],"sourcesContent":["import { Grid, GridItem, Heading, Image, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\ninterface aboutProps {\r\n  name: string;\r\n  number: string;\r\n  title: string;\r\n  subtitle: string;\r\n  avatar_image_path: string;\r\n  // location_map_link: string;\r\n}\r\nconst About: React.FC<aboutProps> = ({\r\n  name,\r\n  number,\r\n  title,\r\n  subtitle,\r\n  avatar_image_path,\r\n  // location_map_link,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <Grid\r\n        m={\"auto\"}\r\n        w={{\r\n          base: \"100%\",\r\n          sm: \"90%\",\r\n          md: \"800px\",\r\n          lg: \"1000px\",\r\n          xl: \"1100px\",\r\n          \"2xl\": \"1400px\",\r\n        }}\r\n        gridTemplateAreas={{\r\n          sm: ` \" about image\"   `,\r\n          base: ` \" image\" \"about\" `,\r\n        }}\r\n        gridTemplateColumns={{\r\n          sm: \"repeat(2,1fr)\",\r\n          base: \"repeat(1,1fr)\",\r\n        }}\r\n        gridTemplateRows={{\r\n          sm: \"repeat(1, 1fr)\",\r\n          base: \"repeat(2,1fr)\",\r\n        }}\r\n        gap={{\r\n          base: \"50px\",\r\n        }}\r\n      >\r\n        <GridItem area={\"image\"}\r\n          // border={\"1px\"}\r\n\r\n          width={{\r\n            base: \"100%\",\r\n          }}\r\n          display={\"flex\"}\r\n          justifyContent={\"center\"}\r\n          alignItems={\"center\"}\r\n        >\r\n          {\" \"}\r\n          <Image\r\n            borderRadius={\"10px\"}\r\n            w={{\r\n              sm: \"650px\",\r\n              base: \"100%\",\r\n            }}\r\n            m={\"auto\"}\r\n            src={`./images/${avatar_image_path}`}\r\n          />{\" \"}\r\n        </GridItem>\r\n        <GridItem area={\"about\"}>\r\n          <Heading\r\n            fontSize={{\r\n              sm: \"30px\",\r\n              base: \"26px\",\r\n            }}\r\n            lineHeight={{\r\n              sm: \"95px\",\r\n              base: \"60px\",\r\n            }}\r\n            sx={{\r\n              fontFamily: \"Open Sans\",\r\n              fontWeight: 500,\r\n              color: \"thistheme.text\",\r\n            }}\r\n          >\r\n            {title}\r\n          </Heading>\r\n          <Text\r\n            w={{\r\n              sm: \"90%\",\r\n              base: \"80%\",\r\n            }}\r\n            m={\"auto\"}\r\n            fontSize={{\r\n              sm: \"20px\",\r\n              base: \"14px\",\r\n            }}\r\n            lineHeight={{\r\n              sm: \"30px\",\r\n            }}\r\n            sx={{\r\n              fontFamily: \"Open Sans\",\r\n              fontWeight: 400,\r\n              color: \"thistheme.describe\",\r\n            }}\r\n          >\r\n            {subtitle}\r\n          </Text>\r\n\r\n          <Heading\r\n            fontSize={{\r\n              sm: \"30px\",\r\n              base: \"25px\",\r\n            }}\r\n            lineHeight={{\r\n              sm: \"95px\",\r\n              base: \"60px\",\r\n            }}\r\n            sx={{\r\n              fontFamily: \"Open Sans\",\r\n              fontWeight: 500,\r\n              color: \"thistheme.text\",\r\n            }}\r\n          >\r\n            {name}\r\n          </Heading>\r\n\r\n          <Text\r\n            w={{\r\n              sm: \"90%\",\r\n              base: \"80%\",\r\n            }}\r\n            m={\"auto\"}\r\n            fontSize={{\r\n              sm: \"20px\",\r\n              base: \"16px\",\r\n            }}\r\n            lineHeight={{\r\n              sm: \"30px\",\r\n              base: \"46px\",\r\n            }}\r\n            sx={{\r\n              fontFamily: \"Open Sans\",\r\n              fontWeight: 400,\r\n              color: \"thistheme.describe\",\r\n            }}\r\n          >\r\n            {number}\r\n          </Text>\r\n\r\n          {/* <Button\r\n            sx={{\r\n              target: \"_blank\",\r\n            }}\r\n            bg={\"thistheme.text\"}\r\n            color={\"white\"}\r\n            _hover={{\r\n              border: \"1px \",\r\n              bg: \"thistheme.background\",\r\n              borderColor: \"thistheme.text\",\r\n              color: \"thistheme.text\",\r\n            }}\r\n            size={\"md\"}\r\n            margin={\"20px\"}\r\n          >\r\n            <a\r\n              target={\"_blank\"}\r\n              rel='noreferrer'\r\n              href=\"https://www.google.com/maps/@28.5006897,77.3152116,12z\"\r\n            >\r\n              Visite On google Map\r\n            </a>\r\n          </Button> */}\r\n        </GridItem>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import {\r\n  Button,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  Image,\r\n  Spacer,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport Socials from \"../socialmedia/Socials\";\r\n\r\ninterface ContactIntroProps {\r\n  title: string,\r\n  profile_image_path: string,\r\n  description: string\r\n}\r\n\r\n\r\nconst ContactIntro: React.FC<ContactIntroProps> = ({ title, profile_image_path, description }) => {\r\n  return (\r\n    <div>\r\n      <Grid\r\n        marginTop={{\r\n          base: \"50px\", sm: \"100px\"\r\n        }}\r\n        m={\"auto\"}\r\n        w={{\r\n          base: \"100%\",\r\n          sm: \"90%\",\r\n          md: \"800px\",\r\n          lg: \"1000px\",\r\n          xl: \"1100px\",\r\n          \"2xl\": \"1400px\",\r\n        }}\r\n        gridTemplateAreas={{\r\n          sm: ` \"image about\"   `,\r\n          base: ` \" image \" \"about\"`,\r\n        }}\r\n        gridTemplateColumns={{\r\n          sm: \"repeat(2,1fr)\",\r\n          base: \"repeat(1,1fr)\",\r\n        }}\r\n        gridTemplateRows={{\r\n          sm: \"repeat(1, 1fr)\",\r\n          base: \"repeat(2,1fr)\",\r\n        }}\r\n      >\r\n        <GridItem\r\n          area={\"image\"}\r\n          width={{\r\n            base: \"100%\",\r\n          }}\r\n          display={\"flex\"}\r\n          justifyContent={\"center\"}\r\n          alignItems={\"center\"}\r\n        >\r\n          {\" \"}\r\n          <Image\r\n            borderRadius={\"10px\"}\r\n            w={{\r\n              sm: \"250px\",\r\n              base: \"200px\",\r\n            }}\r\n            src={profile_image_path}\r\n          />{\" \"}\r\n        </GridItem>\r\n        <GridItem area={\"about\"}>\r\n          <Heading\r\n            fontSize={{\r\n              sm: \"50px\",\r\n              base: \"30px\",\r\n            }}\r\n            lineHeight={{\r\n              sm: \"95px\",\r\n              base: \"65px\",\r\n            }}\r\n            sx={{\r\n              fontFamily: \"Open Sans\",\r\n              fontWeight: 400,\r\n              color: \"thistheme.text\",\r\n            }}\r\n          >\r\n            {title}\r\n          </Heading>\r\n          <Text\r\n            w={{\r\n              sm: \"90%\",\r\n              base: \"80\",\r\n            }}\r\n            m={\"auto\"}\r\n            fontSize={{\r\n              sm: \"20px\",\r\n              base: \"16px\",\r\n            }}\r\n            lineHeight={{\r\n              sm: \"30px\",\r\n            }}\r\n            sx={{\r\n              fontFamily: \"Open Sans\",\r\n              fontWeight: 400,\r\n              color: \"thistheme.describe\",\r\n            }}\r\n          >\r\n            {description}\r\n          </Text>\r\n\r\n          <Socials />\r\n          <Spacer />\r\n          <Button\r\n            sx={{\r\n              target: \"_blank\"\r\n            }}\r\n            bg={\"thistheme.text\"}\r\n            color={\"white\"}\r\n            _hover={{\r\n              border: \"1px \",\r\n              bg: \"thistheme.background\",\r\n              borderColor: \"thistheme.text\",\r\n              color: \"thistheme.text\",\r\n            }}\r\n            size={\"md\"}\r\n            onClick={() => {\r\n              window.open(\"https://drive.google.com/file/d/1Ed3QC1wUNjKQS6HdP0nXgmggDRzHRZso/view?usp=drive_link\", \"_blank\");\r\n              setTimeout(() => {\r\n                  window.location.href = \"https://drive.google.com/uc?export=download&id=1Ed3QC1wUNjKQS6HdP0nXgmggDRzHRZso\";\r\n              }, 500); \r\n          }}\r\n          >\r\n \r\n            See Resume\r\n          </Button>\r\n        </GridItem>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactIntro;\r\n","import React from 'react'\r\nimport About from '../../components/About/About'\r\nimport Blog from '../../components/Blog/Blog'\r\nimport ContactIntro from '../../components/ContactIntro/ContactIntro'\r\nimport { contactPageData } from '../../portfolio'\r\nimport { keyframes } from \"@emotion/react\";\r\nimport Reveal from 'react-awesome-reveal'\r\nimport { Element } from 'react-scroll'\r\n\r\nconst Upwards = keyframes`\r\nfrom {\r\n  opacity: 0;\r\n  transform: translateY(50px);\r\n}\r\n\r\nto {\r\n  opacity: 1;\r\n  transform: translateY(0px);\r\n}\r\n`\r\nconst Contact = () => {\r\n\r\n  const about = {\r\n    ...contactPageData.addressSection,\r\n    ...contactPageData.phoneSection\r\n  }\r\n  // console.log(about)\r\n  return (\r\n    <Element name=\"/contact\">\r\n\r\n\r\n      <div id='Contact Me'>\r\n        <Reveal duration={2000} keyframes={Upwards}>\r\n          <ContactIntro {...contactPageData.contactSection} />\r\n        </Reveal>\r\n\r\n        {/* <Reveal duration={2000} keyframes={Upwards}>\r\n        <Blog {...contactPageData.blogSection} />\r\n      </Reveal> */}\r\n        <Reveal duration={2000} keyframes={Upwards}>\r\n          <About  {...about} />\r\n        </Reveal>\r\n      </div></Element>\r\n  )\r\n}\r\n\r\nexport default Contact","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { Box, Image } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\ninterface SocialProps {\r\n  name: string,\r\n  link: string,\r\n  fontAwesomeIcon: string,\r\n  backgroundColor: string\r\n}\r\n\r\nconst Social: React.FC<SocialProps> = ({ name, link, fontAwesomeIcon, backgroundColor }) => {\r\n  return (\r\n    <Box\r\n      w={\"41px\"}\r\n      h={\"41px\"}\r\n      backgroundColor={backgroundColor}\r\n      borderRadius={\"50%\"}\r\n      m={\"auto\"}\r\n      display={\"flex\"}\r\n      justifyContent={\"center\"}\r\n      alignItems={\"center\"}\r\n    >\r\n      <Image width={\"80%\"} src={`/images/${fontAwesomeIcon}`} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Social;\r\n","import React from \"react\";\r\nimport { SimpleGrid } from \"@chakra-ui/react\";\r\nimport { socialMediaLinks } from \"../../portfolio\";\r\nimport Social from \"./social/Social\";\r\nimport \"./this.css\";\r\nconst Socials: React.FC = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <SimpleGrid\r\n        minChildWidth=\"41px\"\r\n        w={{ base: \"80%\" }}\r\n        m={\"auto\"}\r\n        mt={\"20px\"}\r\n        spacing=\"15px\"\r\n        display={\"flex\"}\r\n        flexWrap={\"wrap\"}\r\n        alignContent={\"center\"}\r\n        mb={\"20px\"}\r\n        justifyContent={\"center\"}\r\n      >\r\n        {socialMediaLinks.map((item, i) => {\r\n          if(!item.active) return null;\r\n          return (\r\n            <a key={i} href={item.link} rel=\"noreferrer\" target={\"_blank\"}>\r\n              {\" \"}\r\n              <Social {...item} />\r\n            </a>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Socials;\r\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface SpacerProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * A flexible flex spacer that expands along the major axis of its containing flex layout.\n * It renders a `div` by default, and takes up any available space.\n *\n * @see Docs https://chakra-ui.com/flex#using-the-spacer\n */\nexport const Spacer = chakra(\"div\", {\n  baseStyle: {\n    flex: 1,\n    justifySelf: \"stretch\",\n    alignSelf: \"stretch\",\n  },\n})\n\nSpacer.displayName = \"Spacer\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  ResponsiveValue,\n  SystemProps,\n  forwardRef,\n  chakra,\n} from \"@chakra-ui/system\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nimport { BoxProps } from \"./box\"\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * Shorthand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">(function GridItem(\n  props,\n  ref,\n) {\n  const {\n    area,\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = compact({\n    gridArea: area,\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGridItem.displayName = \"GridItem\"\n"],"names":["_ref","name","number","title","subtitle","avatar_image_path","_jsx","children","_jsxs","Grid","m","w","base","sm","md","lg","xl","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","gap","GridItem","area","width","display","justifyContent","alignItems","Image","borderRadius","src","concat","Heading","fontSize","lineHeight","sx","fontFamily","fontWeight","color","Text","profile_image_path","description","marginTop","Socials","Spacer","Button","target","bg","_hover","border","borderColor","size","onClick","window","open","setTimeout","location","href","Upwards","keyframes","_templateObject","_taggedTemplateLiteral","Contact","about","contactPageData","addressSection","phoneSection","Element","id","Reveal","duration","ContactIntro","contactSection","About","SimpleGrid","forwardRef","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","theme","useTheme","templateColumns","mapResponsive","value","_value","getToken","n","widthToColumns","count","jsx","columnGap","rowGap","displayName","link","fontAwesomeIcon","backgroundColor","Box","h","style","flexDirection","mt","flexWrap","alignContent","mb","socialMediaLinks","map","item","i","active","rel","Social","Object","freeze","prop","mapper","Array","isArray","isObject","keys","reduce","result","key","ButtonGroupProvider","useButtonGroup","createContext","strict","ButtonIcon","className","_children","isValidElement","cloneElement","focusable","_className","cx","chakra","span","alignSelf","flexShrink","ButtonSpinner","label","placement","Spinner","height","__css","marginProp","spinnerStyles","useMemo","position","div","group","styles","useStyleConfig","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","as","omitThemingProps","buttonStyles","_focus","zIndex","appearance","userSelect","whiteSpace","verticalAlign","outline","defaultType","isButton","setIsButton","useState","useCallback","node","tagName","useButtonType","contentProps","jsxs","button","useMergeRefs","dataAttr","disabled","opacity","ButtonContent","Fragment","marginEnd","marginStart","h2","baseStyle","flex","justifySelf","templateAreas","column","row","autoFlow","autoRows","templateRows","autoColumns","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","spanFn","colSpan","colStart","colEnd","rowEnd","rowSpan","rowStart","compact","gridArea","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd"],"sourceRoot":""}